{% include "generated-message.jinja" %}
// clang-format off

#include <{{ includePath }}{{ name }}.hpp>

#include <format>
#include <iostream>


using namespace std::string_view_literals;


namespace {{ namespace }}
{

{{ name }}::{{ name }}(std::string_view str) : value(Parse(str))
{ }

std::array<{{ name }}, {{ length(items) }}ul> const & {{ name }}::Values() noexcept
{
    static constexpr std::array<{{ name }}, {{ length(items) }}ul> values = {
{% for item in items %}
        +{{ name }}::{{ item.name }}{% if not loop.is_last %},{% endif %}

{% endfor %}
    };

    return values;
}

std::string_view {{ name }}::Name() noexcept
{
    return "{{ name }}"sv;
}

std::string_view {{ name }}::ToString() const noexcept
{
    switch (value)
    {
{% for item in items %}
    case {{ item.name }}: return "{{ item.name }}"sv;
{% endfor %}
    }

    return "Unknown"sv;
}

{{ name }} {{ name }}::Parse(std::string_view str)
{
    auto result = TryParse(str);
    if (!result)
    {
        throw std::exception(std::format(
            "Unable to parse {{ namespace }}::{{ name }} from '{}'    {} ln {}",
            str,
            __FILE__,
            __LINE__).c_str());
    }

    return result.value();
}

std::optional<{{ name }}> {{ name }}::TryParse(std::string_view str)
{
{% for item in items %}
{% if existsIn(item, "alts") %}
{% if not loop.is_first %}

{% endif %}
    // Alternatives for {{ item.name }}:
{% endif %}
    if (str == "{{ item.string }}"sv) return +{{ name }}::{{ item.name }};
{% if existsIn(item, "alts") %}
{% for alt in item.alts %}
    if (str == "{{ alt }}"sv) return +{{ name }}::{{ item.name }};
{% endfor %}
{% if existsIn(item, "alts") %}

{% endif %}
{% endif %}
{% endfor %}

    return std::nullopt;
}

std::ostream & operator<<(std::ostream & os, {{ name }} value)
{
    return os << value.ToString();
}

} // namespace {{ namespace }}
// clang-format on